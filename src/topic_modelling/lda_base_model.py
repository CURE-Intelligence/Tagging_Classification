import gensim
from typing import List, Tuple
import gensim.corpora as corpora
from pprint import pprint
from gensim.models import CoherenceModel

"""
def initialize_model(corpus: List[List[Tuple[int, int]]],
                     id2word: corpora.Dictionary,
                     num_topics: int,
                     alpha_value: float,
                     eta_value: float = 'auto') -> gensim.models.LdaMulticore:
    
    Initialize and return an LDA (Latent Dirichlet Allocation) model using Gensim's LdaMulticore.

    Args:
        corpus (List[List[Tuple[int, int]]]): A list of bag-of-words representations of documents.
            Each document is represented as a list of tuples (word_id, word_frequency).
        id2word (corpora.Dictionary): Gensim dictionary mapping words to their integer ids.
        num_topics (int): The number of topics to be extracted from the corpus.
        alpha_value (float): The alpha hyperparameter for the LDA model, controlling the sparsity of topic distributions.
        eta_value (float or str, optional): The eta hyperparameter for the LDA model, controlling the sparsity of word distributions over topics.
            Defaults to 'auto'.

    Returns:
        gensim.models.LdaMulticore: Initialized LDA model.

    Example:
        >>> corpus = [
        >>>     [(0, 1), (1, 2), (2, 1)],
        >>>     [(0, 1), (3, 1), (4, 2)],
        >>>     [(1, 1), (4, 1)]
        >>> ]
        >>> id2word = corpora.Dictionary.from_corpus(corpus)
        >>> lda_model = initialize_model(corpus, id2word, num_topics=3, alpha_value=0.1)
    
    lda_model = gensim.models.LdaMulticore(corpus=corpus,
                                           id2word=id2word,
                                           num_topics=num_topics,
                                           alpha=alpha_value,
                                           eta=eta_value,
                                           random_state=100,
                                           chunksize=100)

    return lda_model


def print_topics(lda_model: gensim.models.LdaMulticore) -> None:
    
    Print the topics generated by the LDA model.

    Args:
        lda_model (gensim.models.LdaMulticore): Initialized LDA model.

    Returns:
        None
    
    pprint(lda_model.print_topics())


def compute_coherence_values(corpus: List[List[Tuple[int, int]]],
                             dictionary: corpora.Dictionary,
                             data_lemmatized: List[List[str]],
                             k: int,
                             a: float,
                             b: float
                             ):
    
    Compute coherence score for given LDA model hyperparameters.

    Args:
        corpus: List of bag-of-words representations of documents.
        dictionary: Gensim dictionary mapping words to their integer ids.
        k (int): Number of topics.
        a (float): Alpha hyperparameter.
        b (float): Beta hyperparameter.
        data_lemmatized (List[List[str]]): Lemmatized documents.

    Returns:
        float: Coherence score.
    
    lda_model = initialize_model(corpus, id2word=dictionary, num_topics=k, alpha_value=a, eta_value=b)
    coherence_model_lda = CoherenceModel(model=lda_model, texts=data_lemmatized, dictionary=dictionary, coherence='c_v')
    return coherence_model_lda.get_coherence()
    
"""

import gensim
from typing import List, Tuple, Union, Dict
import gensim.corpora as corpora
from pprint import pprint
from gensim.models import CoherenceModel

def initialize_model(corpus: List[List[Tuple[int, int]]],
                     id2word: corpora.Dictionary,
                     model_params: Dict[str, Union[int, float, str]]) -> gensim.models.LdaMulticore:
    """
    Initialize and return an LDA (Latent Dirichlet Allocation) model using Gensim's LdaMulticore.

    Args:
        corpus (List[List[Tuple[int, int]]]): A list of bag-of-words representations of documents.
            Each document is represented as a list of tuples (word_id, word_frequency).
        id2word (corpora.Dictionary): Gensim dictionary mapping words to their integer ids.
        model_params (Dict[str, Union[int, float, str]]): Dictionary containing model parameters including
            'num_topics', 'alpha', and 'eta'.

    Returns:
        gensim.models.LdaMulticore: Initialized LDA model.

    Example:
        >>> corpus = [
        >>>     [(0, 1), (1, 2), (2, 1)],
        >>>     [(0, 1), (3, 1), (4, 2)],
        >>>     [(1, 1), (4, 1)]
        >>> ]
        >>> id2word = corpora.Dictionary.from_corpus(corpus)
        >>> model_params = {'num_topics': 3, 'alpha': 0.1, 'eta': 'auto'}
        >>> lda_model = initialize_model(corpus, id2word, model_params)
    """
    lda_model = gensim.models.LdaMulticore(corpus=corpus,
                                           id2word=id2word,
                                           num_topics=model_params['num_topics'],
                                           alpha=model_params['alpha'],
                                           eta=model_params['eta'],
                                           random_state=100,
                                           chunksize=100)
    return lda_model


def print_topics(lda_model: gensim.models.LdaMulticore) -> None:
    """
    Print the topics generated by the LDA model.

    Args:
        lda_model (gensim.models.LdaMulticore): Initialized LDA model.

    Returns:
        None
    """
    return lda_model.show_topics()

